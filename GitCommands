---- INSTALATION LINUX -----
sudo apt install git 			: Install git on debina based system
sudo yum install git			: Install git on fedora

---- CONFIGURATION -----
git config --system <tag>		: Configure for all users and repositories (/etc/gitconfig)
git config --system --list		: List configuration for all users and repositories (/etc/gitconfig)
git config --global <tag>		: Configure for specific user (~/.gitconfig ~/.config/git/config)
git config --global --list		: List configuration for specific user
git config --list			: List all properties configureted by user
git config <key>			: Value of the git use for specific key (user.name)

---- IDENTITY -----
git config --global user.name "name"	: Configure the user name for all repositories
git config --global user.email <email>	: Configure the user email for all repostories		
git config user.name "name"		: Configure the user name for specific project
git config user.email <email>		: Configure the user email for specific project

---- EDITOR -----
git config --global core.editor <editor>: Configure edito to use git

---- HELP -----
git help <verb>				: Help for a specific verb (open on a browser)
git <verb> --help			: Help for a specific verb (open on a browser)
man git-<verb>				: Help for a specific verb open on a terminal

---- INIT A GIT REPOSITORY ----
git init				: Initialize a empty repository into the project
git add <files>				: Add the files to get follow for git
git commit -m "message" 		: Confirm the canges
git clone <url>				: Clone a repository from url with default name of repository
git clone <url> <name>			: Clone a repository form url with specific directory name

---- FILES STATE ----	
git status              		: Show the status of local repository
git status -s or --short		: Show the compact status (A: file add to track, M left: modified and preparate, M right: modified, ??: file untracked)

---- IGNORE FILES ----
touch .gitignore			: Create a new file .gitignore

---- CHANGES ----
git diff				: Show a compare beetween work directory with staged area files (changes without prepar)
git diff --staged			: Show a changes prepared, ready to confirm
git diff --cached			: Show a changes prepared, ready to confirm
git difftool				: Show a interface grafic to show changes of git diff
git difftool --staged			: Show a interface grafic to show changes of git diff --staged
git difftool --tool-help		: Show a availabled program to show grafical diff

---- CONFIRM CHANGES ----
git commit				: Start the preference editor to put a message of commit
git commit -v				: Start the preference editor with diff content to put a message
git commit -m "message"			: Confirm changes that are into staged area with a message 
git commit -a -m "message"		: Confirm changes directly of all tracked file modified with a message

---- DELETE FILES ----
git rm <file>				: Delete a file from repository and work directory and add to stage area to be confirm
git rm -f <file>			: Force delete a file with changes from stage area or not
git rm --cached <file>			: Delete a file form repository without delete from work directory 

git show                		: Show all history changes between last commits
git log <file>          		: Show commits history of file_name
git log --stat          		: Show the length of changes in bytes
git rm --cached <file>  		: Delete the <file> from git move to  (Untracked) filesbut the changes is not deleted
git rm --force <file>   		: Delete the <file> from git and hard disk. The file is deleted 
git restore --staged <file> 		: Unstage the file from stage
git restore <file>      		: Discard changes in working directory, delete changes from the last commit
git config --list       		: List the configuration of git repository
git config --list --show-origin 	: Location where the configuratios are save or store
git config --global user.name "name" 	: Config the name for all users in this PC
git config user.name "name" 		: Config the name just for this repository (local form)
git config --global user.email "email"
git config user.email "email"
git diff <commit_ID> <commit_ID> 	: Show differences between two commits
git reset <commit_ID> --soft    	: Return to the <commit_ID> version project deleted the last commits but staging area is conserved
git reset <commit_ID> --mixed   	:
git reset <commit_ID> --hard    	: Return to the <commit_ID> version project deleted the last commits and staging area
git reset HEAD <file>			: Unstage the untracked file from stage
git reset HEAD                  	: Unstage all files from stage
git checkout -- <file>			: Restore the file from stage to last commit file
git checkout <commit_ID> <file> 	: HEAD move to the specific <commit_ID> of <file> without deleted the commits and "main" point to last commit
git checkout main <file>        	: HEAD move to the state of last commit of <file> on branch main
git checkout <commit_ID>		: HEAD move to the specific <commit_ID> without deleted the commits and "main" point to last commit
git checkout - 				: Move HEAD to last commit
git log --oneline --all			: Show all commits
git log --graph --oneline --decorate
git branch <branch_name>        	: Create a new branch
git checkout -b <branch_name>		: Create a new branch and turn to this branch
git checkout <branch_name>      	: Turn the branch to <branch_name>
git merge <branch_name>         	: Merge the <branch_name> to the current branch
git push <to(origin)> <from(branch)>	: Send last commits from actual branch to remote repository (origin)
git pull <from(origin)> <to(branch)>	: Recive last commits from remote repository (origin) to the actual branch
git branch -D <branch_name>		: Delete the branch locally


GENERATING A NEW SSH KEY
ssh-keygen -t ed25519 -C "email"	: Change email to your email
ssh-keygen -t rsa -b 4096 -C "email"	: If you're using a legacy system that doesn't suport the Ed25519 algorithm
eval "$(ssh-agent -s)"			: Init the ssh agent on the background and show like this > Agent pid 59566
ssh-add ~/.ssh/id_ed25519		: Add your ssh private key to the ssh-agent and add your public-key to github 
