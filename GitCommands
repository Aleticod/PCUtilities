---- INSTALATION LINUX -----
sudo apt install git-all 			: Install git on debina based system
sudo yum install git-all			: Install git on fedora
sudo apt install install-info

---- CONFIGURATION -----
git config --system <tag>		: Configure for all users and repositories (/etc/gitconfig)
git config --system --list		: List configuration for all users and repositories (/etc/gitconfig)
git config --global <tag>		: Configure for specific user (~/.gitconfig ~/.config/git/config)
git config --global --list		: List configuration for specific user
git config --local <tag>		: Configure for specific repository (.git/config)
git config --local --list		: List configuration for specific repository
git config --list --show-origin		: List setting and where they are coming from using
git config --list			: List all properties configureted by user
git config <key>			: Value of the git use for specific key (user.name)
git config --show-origin <key>
git config --global --show-origin --list
git config --global init.defaultBranch main	: Set the name of default branch as main

---- IDENTITY -----
git config --global user.name "name"	: Configure the user name for all repositories
git config --global user.email <email>	: Configure the user email for all repostories		
git config user.name "name"		: Configure the user name for specific project
git config user.email <email>		: Configure the user email for specific project

---- EDITOR -----
git config --global core.editor <editor>: Configure edito to use git

---- HELP -----
git help <verb>				: Help for a specific verb (open on a browser)
git <verb> -h
git <verb> --help			: Help for a specific verb (open on a browser)
man git-<verb>				: Help for a specific verb open on a terminal

---- INIT A GIT REPOSITORY ----
git init				: Initialize a empty repository into the project
git add <files>				: Add the files to get follow for git
git commit -m "message" 		: Confirm the canges
git clone <url>				: Clone a repository from url with default name of repository
git clone <url> <name>			: Clone a repository form url with specific directory name

---- FILES STATE ----	
git status              		: Show the status of local repository
git status -s or --short		: Show the compact status (A: file add to track, M left: modified and preparate, M right: modified, ??: file untracked)

---- IGNORE FILES ----
touch .gitignore			: Create a new file .gitignore

---- CHANGES ----
git diff				: Show a compare beetween work directory with staged area files (changes without prepar)
git diff --staged			: Show a changes prepared, ready to confirm
git diff --cached			: Show a changes prepared, ready to confirm
git difftool				: Show a interface grafic to show changes of git diff
git difftool --staged			: Show a interface grafic to show changes of git diff --staged
git difftool --tool-help		: Show a availabled program to show grafical diff

---- CONFIRM CHANGES ----
git commit				: Start the preference editor to put a message of commit
git commit -v				: Start the preference editor with diff content to put a message
git commit -m "message"			: Confirm changes that are into staged area with a message 
git commit -a -m "message"		: Confirm changes directly of all tracked file modified with a message

---- DELETE FILES ----
git rm <file>				: Delete a file from repository and work directory and add to stage area to be confirm
git rm -f <file>			: Force delete a file with changes from stage area or not
git rm --cached <file>			: Delete a file form repository without delete from work directory 
git rm <regular-expresio>		: Delete files, directries with regular expresions

---- CHANGE FILES NAMES ----
git mv <file-from> <file-to>		: Change the file name and put into stage area with renamed tag

---- HISTORY COMMIT ----
git log					: Show the history of commits
git log -p (--patch)			: Show the history of commits with entry diferences in each commit
git log -<n>				: Show the last n history commits  
git log --stat				: Show the history with statistic imformation (lines insert or delete)
git log --shortstat			: Show the history with short statistic
git log --oneline			: Shorthand for --pretty=oneline --abbrev-commit
git log --name-only			: Show the files names modifies in this commit
git log --name-status			: Show the files names modifies in this commit and status (A, M, D, R)
git log --abbrev-commit			: Show the history with the first caracters of the SHA-1
git log --relative-date			: Show date in relative format (2 weeks ago)
git log --pretty=(online, short, full, fuller)	: Show the history in a specific format
git log --pretty=format:"%h - %an, %ar : %s"	: Show the history in a personalize format
git log --pretty=format:"%h %s" --graph	: Show the history with personalize format and ASCII graph
git log --since=<n>.weeks		: Show history from <n> last weeks ("2008-01-15", "2 years 1 day 3 minutes ago") (--unit, --before , --after)
git log --author=<author>		: Show history with filter by author name
git log --grep=<key-word>		: Show history with filter by key-word into commit message (more than one filter add --all-match to match with two)
git log -S <string>			: Show history with filter by chage code adding or deleting this string
git log -- <file or directory>		: Show history with filter by file or directory (this should be the last option and precedent with -- )
git log --committer=<committer>		: Show history with filter by who made the commit
git log --pretty="%h - %s" --author=gitster --since="2008-10-01" --before="2008-11-01" --no-merges -- t/

---- UNDO THINGS ----
git commit --amend			: Undo the last commit and rewrite this commit with changes in stage area (if there are not any changes just change the message of commit, if there are change in stage area add this changes into commit and change the message commit)
git commit -m "some word"
git add <forgottern-file>
git commit --amend
git reset HEAD <file>			: Unstage from stage area
git checkout -- <file>			: Unmodify a modified file, revert it back to what it looked like last commit, disckar changes in working directory, replaced that with the last staged or committed version
git restore --staged <file>		: Unstage from stage area
git restore <file>			: Unmodify a modified file, replace that file with the last staged or committed version

---- REMOTE REPOSITORY ----
git remote				: Show shortnames of each remote (origin is the default name git gives to the server you clone from)
git remote -v				: Show the URL that git has stored for the shortname to be used
git remote add <shortname> <url>	: Add a new remote git repository as a shortname
git fetch <remote>			: Get data from remote project, gell all branches from remote. It doesnt autamatically merge it with any of your work or modify what you are currently working
git pull <remote>			: Fetch and merge automatically the remote branch into your current branch
git clone <url>				: Automatically sets up your local master branch to track the remote master branch
git config --global pull.rebase "false"
git config --global pull.rebase "true"
git push <remote> <branch>		: Push your branch to remote server
git remote show <remote>		: See information about a pariticular remote
git remote rename <name-from> <name-to>	: Change a remote's shortname
git remote remove (rm) <remote>		: Remove a remote server (remote directory)

---- TAGGING ----
git tag					: Listing the existing tags in alphabetical orden
git tag --list (-l)			: Listing the existing tags in alphabetical orden
git tag -l "v1.8.5*"			: Search for tags that match in particular pattern
git tag -a <tag> -m <message-tag>	: Creating a annoted tag with a message, it is created in the las commit
git show <tag>				: See the tag data along with the commit that was tagged
git tag <tag>				: Creating a lightweight tag
git show <tag>				: Just show the commit information
git tag -a <tag> <checksum-commit>	: Tagging commit after you have move past them
git push <remote> <tagname>		: Sharing a tag into remote server, for default push doesn't transfer tags
git push <remote> --tags		: Transfer all the tags to the remote server
git tag -d <tagname>			: Deleting a tag on your local repository
git push <remote> :refs/tags/<tagname>	: Removing the tag from any remote servers
git push <remote> --delete <tagname>	: Removing the tag from any remote servers
git checkout <tagname>			: View the verion of the files a tag is pointing
git checkout -b <branch-name> <tagname>	: Create a branch from specific version point

---- ALIASES ----
git config --global alias.<short> <command>	: Create a partially command from specific command
git config --global alias.br branch	: Create a alias for branch (git br)
git config --global alias.unstage 'reset HEAD --'
git config --global alias.last 'log -1 HEAD'
git config --global alias.visual '!gitk'	: Run an external command, rather than a Git subcommand (git visual = gitk)

---- BRANCHES ----
git branch <branch-name>		: Create a new pointer (branch) to the same commit you're currently on
git branch -d <branch-name>		: Delete a branch
git log --online --decorate		: Show where the branch pointers are pointing
git checkout <branch-name>		: Switch to an existing branch
git log <branch-name>			: Show commit history for the desired branch
git log --all				: Show commit history for all the branches
git log --oneline --decorate --graph --all	: Show history of commit for all branches
git checkout -b <branch-name>		: Create a new branch and switch it
git switch <branch-name>		: Switch to existing branch
git switch --create (-c) <branch-name>	: Create a new branch and switch it
git switch -				: Return previously checked out branch
git merge <from-branch>			: Merge the specific branch into current branch
git mergetool				: Use graphic interface to resolve conflicts
git branch				: List the current branches
git branch -v				: Show the last commit on each branch
git branch --merged			: Filter the branches that have yet merged into the current branch (this branches should be deleted)
git branch --no-merget			: Filter the branches that no have yet merged into the current branch
git branch -D <branch-name>		: Force deleting a branch if no merge into other branch
git branch --no-merget <branch-name>	: Filter the branches that no have yet merged into <branch-name>
git branch --move <name-from> <name-to>	: Rename the branch locally
git push --set-upstream <remote> <name-to>	: Update the name changed in remote repository
git branch --all			: List all branches (local and remote branches)
git push origin --delete <name-from>	: Delete the bad name on the remote repository

---- REMOTE BRANCHES ----
git ls-remote <remote>			: Get a full list of remote references (branch, tags)
git remote show <remote>		: Remote branches as well as more information
<remote>/<branch>			: Remote-tracking branch
git clone -o <remote-name> <url>	: Change the remote server name and the default remote branch will be <remote-name>/master
git fetch <remote>			: Synchronize with remote server, fetches any data and updates the local database, moving <remote>/master pointer (update remote-tracking branche) don't modify the working directory
git push <remote> <branch>		: Push a branch to remote server, (local)refs/head/<branch>:refs/head/<branch>(remote)
git push <remote> <local-branch>:<remote-branch>	: Push a local-branch to a different remote-branch
git config --global credential.helper cache	: Keep authentication in memory for a few minutes
git merge <remote>/<branch>		: Merge the remote-tracking branch into the current local-branch 
git checkout -b <local-branch> <remote>/<remote-branch>	: Merge the remote-tracking branch into new local-branch (local-branch tack the the remote-branch)

---- TRACKING BRANCHES ----
git checkout -b <local-branch> <remote>/<remote-branch>	: Automatically creates a "tracking branch" that tracks to remote-branch (upsream branch) generally the local branch is the same of the remote branch
git checkout --track <remote>/<remote-branche>	: Create a new tracking branch to tack the remote branch (This create new local branch called the same name of remote-branch)
git checkout <local-branch>		: Create a tracking branch if doesn't and exactly matches a name on only one remote <remote>/<local-branch>
git branch --set-upstream-to (-u) <remote>/<remote-branch>	: The current local branch is set to track <remote>/<remote-branch> (upstream branch) 
When local branch track a remote branch our local branch is called trancking branch and the remote branch is called upstream branch. Now to refer the upstream branch it can with @{upstream} or @{u}
git merge @{u}				: Merge the upstream branch into tracking branch (remote-tracking branch is merge into local-branch)
git branch -vv				: Show local branches with information what each branch is tracking and if local branch is ahead, behind or both
git fetch --all				: Fetch all the remote servers

---- PULLING ----
git pull				: Verify if current local branch is tracking an upstream branch, and then fetch all data from the server to upstream branch and then try to merge upstream branch into current local branch (tracking branch)

---- DELETING REMOTE BRANCHES ----
git push origin --delete <remote-branch>	: Delete remote branch from the server, this just remove the pointer from the server

---- REBASING ----
git rebase <branch>			: Rebase current branch onto <branch>
git merge <branch>			: Then checkout to the other branch and merge fast-forwward to rebase branch
git rebase --onto <stable-branch> <topic-branc> <current-branch>	: Rebase topic branches
git rebase <stable-branch> <current-branch>	: Rebase the current branch onto to stable branch
git pull --rebase			: Make first fetch on the upstream branch and then make a rebase from current local branch onto upstream branch (git fetch <remote> and then git rebase <remote>/<remote-branch>)
git config --global pull.rebase true	: Default (git pull) is like (git pull --rebase)

---- GETTING GIT ON A SERVER ----
git clone --bare <path-project> <project-name>.git	: Create a new bare repository (doesn't contain a working directory) "local"
cp -Rf <path-project>/.git <project-name>.git	: Copy of the git directory data in <project-name>.git directory "local"
scp -r <project-name>.git user@git.example.com:/srv/git	: Send git local bare repo to server. Store the git repository into /srv/git (The server is called git.exmaple.com) (server harveyphd@192.168.82.41)
git clone user@git.example.com:/srv/git/<project-name>.git	: Clone the repository by other users who have SSH access /srv/git on that server
ssh user@git.example.com		: Conection to the server
cd /srv/git/<project-name>.git		: Change directory to <project-name>.git
git init --bare --shared		: Git will add group write permissions
ssh-keygen -o				: Create a rsa keys
## Server administrator ##
sudo adduser git			: Create a new user called git in server
su git					: Change to git user
cd					: Move to home directory for git user
mkdir .ssh && chmod 700 .ssh		: Create a .ssh directory and change permitions 700 to .ssh directory
touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys	: Create authorized_keys file and change mode
cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys	: Append john public key to authorized_keys
cat /tmp/id_rsa.juan.pub >> ~/.ssh/authorized_keys	: Append juan public key to authorized_keys
## Create a bare repository on the server ##
cd /srv/git				: Move to git directory where are all the respositories
mkdir project.git			: Create a directory for new repository
cd project.git				: Move into git repository
git init --bare				: Initialize the repository without working directory
## On Jhon's computer ##			: Example for use a remote repository to pull and push
cd project
git init
git add .
git commit -m "Initial commit"
git remote add origin git@192.168.1.4:/srv/git/project.git
git push origin master
## Other user #				: Example for other user that has a access ssh to server
git clone git@192.168.1.4:/srv/git/project.git
cd project
vim README
git commit -am "Fix README file"
git push origin master
## Restric to git user ##
cat /etc/shells				: See if git-shell is already in there. If not...
which git-shell				: Make sure git-shell is installed on the system
sudo -e /etc/shells			: Open editor and add path to git-shell from last command
sudo chsh git -s $(which git-shell)	: Change the shell for a git user
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty	: The user public key should init with this line like this (for each user)
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AASdf2342asdfasd...







git show                		: Show all history changes between last commits
git log <file>          		: Show commits history of file_name
git log --stat          		: Show the length of changes in bytes
git rm --cached <file>  		: Delete the <file> from git move to  (Untracked) filesbut the changes is not deleted
git rm --force <file>   		: Delete the <file> from git and hard disk. The file is deleted 
git restore --staged <file> 		: Unstage the file from stage
git restore <file>      		: Discard changes in working directory, delete changes from the last commit
git config --list       		: List the configuration of git repository
git config --list --show-origin 	: Location where the configuratios are save or store
git config --global user.name "name" 	: Config the name for all users in this PC
git config user.name "name" 		: Config the name just for this repository (local form)
git config --global user.email "email"
git config user.email "email"
git diff <commit_ID> <commit_ID> 	: Show differences between two commits
git reset <commit_ID> --soft    	: Return to the <commit_ID> version project deleted the last commits but staging area is conserved
git reset <commit_ID> --mixed   	:
git reset <commit_ID> --hard    	: Return to the <commit_ID> version project deleted the last commits and staging area
git reset HEAD <file>			: Unstage the untracked file from stage
git reset HEAD                  	: Unstage all files from stage
git checkout -- <file>			: Restore the file from stage to last commit file
git checkout <commit_ID> <file> 	: HEAD move to the specific <commit_ID> of <file> without deleted the commits and "main" point to last commit
git checkout main <file>        	: HEAD move to the state of last commit of <file> on branch main
git checkout <commit_ID>		: HEAD move to the specific <commit_ID> without deleted the commits and "main" point to last commit
git checkout - 				: Move HEAD to last commit
git log --oneline --all			: Show all commits
git log --graph --oneline --decorate
git branch <branch_name>        	: Create a new branch
git checkout -b <branch_name>		: Create a new branch and turn to this branch
git checkout <branch_name>      	: Turn the branch to <branch_name>
git merge <branch_name>         	: Merge the <branch_name> to the current branch
git push <to(origin)> <from(branch)>	: Send last commits from actual branch to remote repository (origin)
git pull <from(origin)> <to(branch)>	: Recive last commits from remote repository (origin) to the actual branch
git branch -D <branch_name>		: Delete the branch locally


GENERATING A NEW SSH KEY
ssh-keygen -t ed25519 -C "email"	: Change email to your email
ssh-keygen -t rsa -b 4096 -C "email"	: If you're using a legacy system that doesn't suport the Ed25519 algorithm
eval "$(ssh-agent -s)"			: Init the ssh agent on the background and show like this > Agent pid 59566
ssh-add ~/.ssh/id_ed25519		: Add your ssh private key to the ssh-agent and add your public-key to github 
